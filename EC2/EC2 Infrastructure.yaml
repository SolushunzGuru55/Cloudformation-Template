---
# AWSTemplateFormatVersion: "2018-30-05"

Description: >
  Test Template DeepakNautiyal

Parameters:
  InstanceType:
    Description: "Options for Instances"
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.large
  Department:
    Description: "Name Of the Department"
    Type: String 
    Default: Production
    AllowedValues:
      - Production
      - Developemnt
      - Testing
  KeyName:
    Description: "Key Pair to SSH into the EC2 instance"
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      HVM64: "ami-14c5486b"
    us-east-2:
      HVM64: "ami-922914f7"
    ap-south-1: 
      HVM64: "ami-76d6f519"
    ap-northeast-1:
      HVM64: "ami-92df37ed"

Resources:
  AutoScalingGroupConfig:
    Type: "AWS::AutoScaling::AutoScalingGroup"
    Properties:
      LaunchConfigurationName:
        Ref: "AutoScalingLaunchConfig"
      VPCZoneIdentifier: [!Ref PublicSubnet]
      LoadBalancerNames:
        - Ref: "MyLoadBalancer"
      MaxSize: "2"
      MinSize: "1"
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
          PropagateAtLaunch: "true"
        -
          Key: "Department"
          Value: !Ref Department
          PropagateAtLaunch: "true"
  AutoScalingLaunchConfig:
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroups:
        - Ref: MySecurityGroupIngress
        - Ref: MySecurityGroupEgress
      UserData:
        Fn::Base64:
          Fn::Join:
          - ""
          - - "#!/bin/bash \n"
            - "yum update -y \n"
            - "yum install httpd -y \n"
            - "service httpd start \n"
            - "chkconfig httpd on \n"
            - "cd /var/www/html/ \n"
            - "echo '<html><h1>good morning</h1></html>' > index.html \n"
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: "0.0.0.0/0"
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
  InternetGatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: "0.0.0.0/0"
      MapPublicIpOnLaunch: true
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties: 
      VpcId: !Ref VPC
      AvailabilityZone: !Select [ 0, !GetAZs ]
      CidrBlock: "0.0.0.0/0"
      Tags:
        - 
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties: 
      AllocationId: !GetAtt NatGatewayEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags: 
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  NatGatewayEIP:
    Type: AWS::EC2::EIP
    DependsOn:  InternetGatewayAttachment
    Properties:
      Domain: vpc
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    DependsOn: InternetGatewayAttachment
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  DefaultPublicRoute:
    Type: AWS::EC2::Route
    DependsOn: InternetGatewayAttachment
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      GatewayId: !Ref InternetGateway
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet
  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  DefaultPrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: "0.0.0.0/0"
      NatGatewayId: !Ref NatGateway
  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      SubnetId: !Ref PrivateSubnet
  MySecurityGroupEgress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Test Security group (Egress)"
      VpcId: !Ref VPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  MySecurityGroupIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Test Security Group (Ingress)"
      VpcId: !Ref VPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department
  MyLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      Subnets: [!Ref PublicSubnet]
      SecurityGroups:
        - Ref: MySecurityGroupIngress
        - Ref: MySecurityGroupEgress
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
          Target: "HTTP:80/index.html"
          HealthyThreshold: "3"
          UnhealthyThreshold: "4"
          Interval: "5"
          Timeout: "3"
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
        -
          Key: "Department"
          Value: !Ref Department