---
Description: >
  Test Template DeepakNautiyal

Parameters:
  InstanceType:
    Description: "Options for Instances"
    Type: String
    Default: t2.micro
    AllowedValues:
      - t2.nano
      - t2.micro
      - t2.small
      - t2.large
      - m1.small
      - m1.medium
      - m1.large
      - m1.xlarge
      - m2.xlarge
      - m2.2xlarge
      - m2.4xlarge
      - m3.xlarge
      - m3.2xlarge
      - c1.medium
      - c1.xlarge
  MyVPC:
    Description: Select VPC
    Type: AWS::EC2::VPC::Id
  KeyName:
    Description: "Key Pair to SSH into the EC2 instance"
    Type: AWS::EC2::KeyPair::KeyName

Mappings:
  RegionMap:
    us-east-1:
      HVM64: "ami-14c5486b"
    us-east-2:
      HVM64: "ami-922914f7"
    ap-south-1: 
      HVM64: "ami-76d6f519"
    ap-northeast-1:
      HVM64: "ami-92df37ed"

Resources:
  MyEC2Instance:
    Type: "AWS::EC2::Instance"
    Metadata:
        AWS::CloudFormation::Init:
          configSets:
            ascending:
              - "config1"
              - "config2"
          config1:
            commands:
              Atest:
                command: "yum update -y"
              Btest:
                command: "yum install httpd -y"
              Ctest:
                command: "service httpd start"
              Dtest:
                command: "chkconfig httpd on"
          config2:
            files:
              /var/www/html/index.html:
                content: "Content for {{website}}"
                context:
                  website: "Your Message"
    Properties:
      ImageId: !FindInMap [RegionMap, !Ref "AWS::Region", HVM64]
      InstanceType: !Ref InstanceType
      KeyName: !Ref KeyName
      SecurityGroupIds:
        - Ref: MySecurityGroupIngress
        - Ref: MySecurityGroupEgress
      UserData:
        Fn::Base64:
          Fn::Join:
          - "\n"
          - - "#!/bin/bash -v"
            - "pip install pystache"
            - "pip install argparse"
            - "pip install python-daemon"
            - "pip install requests"
            - "ln -s /opt/aws/bin/cfn-hup /usr/bin/cfn-hup"
            - "ln -s /opt/aws/bin/cfn-init /usr/bin/cfn-init"
            - "ln -s /opt/aws/bin/cfn-signal /usr/bin/cfn-signal"
            - "ln -s /opt/aws/bin/cfn-elect-cmd-leader /usr/bin/cfn-elect-cmd-leader"
            - "ln -s /opt/aws/bin/cfn-get-metadata /usr/bin/cfn-get-metadata"
            - "ln -s /opt/aws/bin/cfn-send-cmd-event /usr/bin/cfn-send-cmd-event"
            - "ln -s /opt/aws/bin/cfn-send-cmd-result /usr/bin/cfn-send-cmd-result"
            - "yum install -y aws-cfn-bootstrap"
            - "cnf-init -v"
            - " --stack"
            - !Ref "AWS::StackId"
            - "  --resource MyEC2Instance"
            - "  --configsets ascending"
            - "  --region"
            - !Ref "AWS::Region"
      Tags: 
        -
          Key: "username"
          Value: "DeepakNautiyal"
  MySecurityGroupEgress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Test Security group (Egress)"
      VpcId: !Ref MyVPC
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
  MySecurityGroupIngress:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Test Security Group (Ingress)"
      VpcId: !Ref MyVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: "22"
          ToPort: "22"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "80"
          ToPort: "80"
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: "443"
          ToPort: "443"
          CidrIp: 0.0.0.0/0
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
  MyLoadBalancer:
    Type: "AWS::ElasticLoadBalancing::LoadBalancer"
    Properties:
      AvailabilityZones: 
        Fn::GetAZs: ""
      Instances:
        - !Ref MyEC2Instance
      Listeners:
        - LoadBalancerPort: "80"
          InstancePort: "80"
          Protocol: HTTP
      HealthCheck:
          Target: "HTTP:80/index.html"
          HealthyThreshold: "3"
          UnhealthyThreshold: "4"
          Interval: "5"
          Timeout: "3"
      SecurityGroups:
        - Ref: MySecurityGroupIngress
        - Ref: MySecurityGroupEgress
      Tags:
        -
          Key: "username"
          Value: "DeepakNautiyal"
